from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.fsm.context import FSMContext
from utils.states import Start
import psycopg2
from config_reader import config

HOST = config.host.get_secret_value()
USER = config.user.get_secret_value()
PASSWORD = config.password.get_secret_value()
USER_DB_NAME =config.user_db_name.get_secret_value()
PROJECTS_DB_NAME = config.projects_db_name.get_secret_value()
PORT = config.port.get_secret_value()

router = Router()

@router.message(Command("start"))   
async def start(message: Message, state: FSMContext):
    try:
        # connect to exist database
        connection = psycopg2.connect(
            host=HOST,
            user=USER,
            password=PASSWORD,
            database=USER_DB_NAME,
            port=PORT
        )

        # the cursor for performing database
        with connection.cursor() as cursor:
            cursor.execute(
                "SELECT version"
            )
            print(f"Server version: {cursor.fetchone()}")

    except Exception as _ex:
        print("[INFO] Error while working with PostgreSQL", _ex)
    finally:
        if connection:
            connection.close()
            print("[INFO] PostgreSQL connection closed")
    await state.set_state(Start.login)
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.username}</b>, —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏. –ü—Ä–∏—à–ª–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.")

@router.message(Start.login)
async def login(message: Message, state: FSMContext):
    #TODO –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user_name = message.text
    await message.answer(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")