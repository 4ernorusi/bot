import psycopg2
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.fsm.context import FSMContext
from core.utils.states import Start
from core.keyboards import reply, inline
from config_reader import config
from core.data.database import DataBase
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler


HOST = config.host.get_secret_value()
USER = config.user.get_secret_value()
PASSWORD = config.password.get_secret_value()
USER_DB_NAME =config.user_db_name.get_secret_value()
PROJECTS_DB_NAME = config.projects_db_name.get_secret_value()
PORT = config.port.get_secret_value()
CURRENT_USER = None


router = Router()

db = DataBase(host=HOST, user=USER, password=PASSWORD, user_db=USER_DB_NAME, project_db=PROJECTS_DB_NAME, port=PORT)

async def check_deadline(bot: Bot):
    user_connection = await db.connect_user()
    project_connection = await db.connect_project()

    with user_connection.cursor() as cursor:
        cursor.execute("""SELECT telegram_id FROM users""")
        telegram_id = cursor.fetchall()
        for id in telegram_id:
            id = id[0]
            if id != None:
                await db.update_tasks_data(id, user_connection, project_connection)
                db.data = sorted(db.data, key=lambda x: x[1][0][-2], reverse=True)
                if db.data != None:  
                    for i in range(min(len(db.data), db.data_check_count)):
                        diff = db.data[i][1][0][-2] - datetime.now()
                        diff = diff.total_seconds()
                        hours = divmod(diff, 3600)[0]
                        print(hours)
                        if 0 <= hours <= db.data_time_to_end:
                            await bot.send_message(id, text="üîî–ù–∞–ø–æ–º–∏–Ω–∞—é –æ –∑–∞–¥–∞—á–µ —Ç–æ–≤–∞—Ä–∏—â!üîî")
                            await print_task(db.data[i], message=None, num_task=i, id=id, bot=bot)
    await db.disconnect(user_connection)
    await db.disconnect(project_connection)

async def get_user_info(message):
    connection = await db.connect_user()
    connection.autocommit = True
    id = str(message.from_user.id)
    # the cursor for performing database
    username, fullname = await db.get_user(id, connection)
    await db.disconnect(connection)
    return username, fullname


async def print_task(el: tuple, message: Message = None, num_task: int = 0, id: str = None, bot: Bot = None):
    task = el[1]
    day_left = task[0][-1]
    deadline_data = ''
    if day_left == "None":
        deadline_data = f"‚úÖ–ù–µ—Ç –¥—ç–¥–ª–∞–π–Ω–∞‚úÖ"
    elif int(day_left) == 0:
        deadline_data = "‚ö†Ô∏è–°–ï–ì–û–î–ù–Ø‚ö†Ô∏è"
    elif int(day_left) > 0:
        deadline_data = f"‚ö†Ô∏è–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {day_left}‚ö†Ô∏è"
    
    if message != None and deadline_data != '':
        await message.answer(f"üõ†Ô∏è<b>{task[1]}</b>:\n\nüìÖ–î—ç–¥–ª–∞–π–Ω: {str(task[0][1]).zfill(2)}.{str(task[0][2]).zfill(2)} –¥–æ {str(task[0][3]).zfill(2)}:{str(task[0][4]).zfill(2)}  {deadline_data}\n\nüí¨{task[3]}\n\nüó£Ô∏è–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: <b>{task[2][0]}</b>", reply_markup=inline.get_more_inline_keyboard(num_task=num_task))
    elif bot != None and deadline_data != '':
        await bot.send_message(id, text=f"üõ†Ô∏è<b>{task[1]}</b>:\n\nüìÖ–î—ç–¥–ª–∞–π–Ω: {str(task[0][1]).zfill(2)}.{str(task[0][2]).zfill(2)} –¥–æ {str(task[0][3]).zfill(2)}:{str(task[0][4]).zfill(2)}  {deadline_data}\n\nüí¨{task[3]}\n\nüó£Ô∏è–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: <b>{task[2][0]}</b>", reply_markup=inline.get_more_inline_keyboard(num_task=num_task))


async def print_tasks(data: list, message: Message):
    db.data = sorted(db.data, key=lambda x: x[1][-2], reverse=True)
    user_fullname = data[0][0]
    await message.answer(f"{user_fullname}, –≤–æ—Ç —Ç–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏‚¨áÔ∏è", reply_markup=reply.main)
    for i, el in enumerate(data):
        await print_task(el, message, i)
        


@router.message(Command('start'))   
async def start(message: Message, state: FSMContext):
    username, fullname = await get_user_info(message)
    if fullname == None:
        await state.set_state(Start.login)
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç —Ç–æ–≤–∞—Ä–∏—â! –¢–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É –ö–æ–º–∏—Ç–µ—Ç–∞. –ü—Ä–∏—à–ª–∏ —Å–≤–æ–π <b>–ü—Ä–æ–ø—É—Å–∫</b>")
    else:
        await state.clear()
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{fullname}</b>. –≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á–∞—Ö. –ü—Ä–∏—Å—Ç—É–ø–∞–π –∫ —Ä–∞–±–æ—Ç–µ —Ç–æ–≤–∞—Ä–∏—â!", reply_markup=reply.main)


@router.message(Start.login)
async def login(message: Message, state: FSMContext):
    username = message.text
    connection = await db.connect_user()
    connection.autocommit = True
    with connection.cursor() as cursor:
        cursor.execute(
                """SELECT username, full_name FROM users WHERE username = %s;""", (username,)
            )
        user = cursor.fetchone()
    if user == None:
        await message.answer(f"–¢–∞–∫–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        await db.update_user(username, str(message.from_user.id), connection)
        await state.clear()
        await message.answer(f"–ü—Ä–æ–ø—É—Å–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{user[1]}</b>. –≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á–∞—Ö. –ü—Ä–∏—Å—Ç—É–ø–∞–π –∫ —Ä–∞–±–æ—Ç–µ —Ç–æ–≤–∞—Ä–∏—â!", reply_markup=reply.main)
        


@router.message()
async def main_menu(message: Message, state: FSMContext):
    msg = message.text.lower()
    if msg == "üõ†Ô∏è–º–æ–∏ –∑–∞–¥–∞—á–∏":
        user_connection = await db.connect_user()
        project_connection = await db.connect_project()

        await db.update_tasks_data(str(message.from_user.id), user_connection, project_connection)

        await db.disconnect(user_connection)
        await db.disconnect(project_connection)

        if db.data == []:
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á", reply_markup=reply.main)
        else:
            await print_tasks(db.data, message)
    elif msg == "üë§—Å–º–µ–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫":
        await state.set_state(Start.login)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π <b>–ü—Ä–æ–ø—É—Å–∫</b>")
    elif msg == "üí≥–º–æ–π –ø—Ä–æ–ø—É—Å–∫":
        username, fullname = await get_user_info(message)
        await message.answer(f"<b>–ò–º—è -></b> {fullname}\n<b>–ü—Ä–æ–ø—É—Å–∫ -></b> {username}", reply_markup=reply.main)
    
